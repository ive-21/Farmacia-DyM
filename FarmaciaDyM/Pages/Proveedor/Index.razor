@page "/proveedores"

@if (!ShowForm)
{
    <h3>Proveedores (@Suppliers.Count)</h3>
    <div class="mb-2">
        <button class="btn btn-success"
            @onclick="()=>{ShowForm = !ShowForm;}">
            Agregar
        </button>
    </div>
}
<div class="container">
    @if (ShowForm)
    {
        <h3>@TituloForm</h3>
        <EditForm Model="request" OnValidSubmit="Send">
            <DataAnnotationsValidator />
            <ValidationSummary />
            
            <div class="mb-3 input-group">
                <label class="input-group-text">Nombre</label>
                <InputText class="form-control" @bind-Value="@request.Nombre"></InputText>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">Telefono</label>
                <InputText class="form-control" @bind-Value="@request.Telefono"></InputText>
            </div>
            
            <div class="btn-group">
                <button type="submit" class="btn btn-outline-success">Guardar</button>
                <button @onclick="Cancelar" class="btn btn-outline-danger">Cancelar</button>
            </div>
        </EditForm>
        <br />
    }
    else
    {
        <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Telefono</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in Suppliers)
            {
                <tr>
                    <td>@customer.Nombre</td>
                    <td>@customer.Telefono</td>
                    <td>
                        <div class="group">
                            <button class="btn btn-warning oi oi-pencil" @onclick="()=>Seleccionar(customer.Id)">
                            </button>
                        </div>
                    </td>
                    <td>
                        <div class="btn-group" @onclick="()=>Eliminar(customer)">
                            <button class="btn btn-danger oi oi-trash">
                            </button>
                        </div>
                    </td>
                    
                </tr>
            }
        </tbody>
    </table>
    }
</div>
@code {
    public string TituloForm => request.Id == 0 ?
    "Agregar proveedor" : "Modificar proveedor";

    public bool ShowForm { get; set; } = false;
    public string Filtro { get; set; } = "";
    public List<ProveedorResponse> Suppliers { get; set; }
        = new List<ProveedorResponse>();

    public ProveedorRequest request { get; set; } = new ProveedorRequest();

    void Cancelar()
    {
        request = new ProveedorRequest();
        ShowForm = false;
    }
    async Task CargarProveedores()
    {
        var resultado =
        await proveedorServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Suppliers = resultado.Data!;
        }
    }

    public void Editar(ProveedorResponse customer)
    {
        ShowForm = true;
        request = new ProveedorRequest
            {
                Id = customer.Id,
                Nombre = customer.Nombre,
                Telefono = customer.Telefono
            };
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarProveedores();
    }

    public async Task Send()
    {
        if (request.Id == 0)
        {
            //Debo registrar el contacto..
            var r = await proveedorServices.Crear(request);
            if (r.Success)
            {
                Cancelar();
                await CargarProveedores();
                StateHasChanged();
            }
        }
        else
        {
            //Debo solicitar modificar el contacto...
            var r = await proveedorServices.Modificar(request);
            if (r.Success)
            {
                Cancelar();
                await CargarProveedores();
                StateHasChanged();
            }
        }
    }

    public void Seleccionar(int Id)
    {
        ShowForm = true;
        request = Suppliers
        .Where(c => c.Id == Id)
        .Select(c => c.ToRequest())
        .FirstOrDefault() ?? new ProveedorRequest();
    }

    public async Task Eliminar(ProveedorResponse customer)
    {
        var resultado = await proveedorServices.Eliminar(customer.ToRequest());
        if (resultado.Success)
        {
            await CargarProveedores();
            StateHasChanged();
        }
    }

}